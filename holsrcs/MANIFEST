ANNOTATIONS
-----------

Various uppercase keywords appear in comments in the source-files.
These indicate various issues.

ASSUMPTION
   an assumption is made about the standard that may not be entirely
   warranted, but will almost certainly be true of all possible
   implementations, and was arguably in the heads of the standard's
   authors.

BAD_ASSUMPTION
   an assumption that has been made for expediency's sake, and should
   be revisited

TODO
   something that needs re-visiting, perhaps in a future deliverable.

SANITY
   the following theorem is a sanity check of the semantics


THEORIES
--------

There are 20 theories in this directory.

utils:
   Defines a variety of useful functions for manipulating lists and
   finite-maps in a functional programming style.  Defined functions
   include
     * a utility function called deNONE for turning a finite map from
       'a to 'b option, into a finite map that maps from 'a to 'b.
     * mapPartial a function just like that of the same name in the ML
       Basis Library.

function_slices:
   Defines functions for operating on "slices" of functions whose
   domain is the natural numbers.

types:
   Establishes the type of C types, and the type-size
   constants, such as INT_MAX etc.

memory:
   Establishes the type of byte, defines representation and valuation
   operations between byte lists and logical values (such as
   integers), defines the offset and sizeof relations.

intrep:
   Some preliminary work on encoding integers as lists of bytes in a
   suitably under-determined way.

expressions:
   Defines the type of C expressions, and a few predicates on these.

statics:
   Defines the typing relation for C expressions.

statements:
   Defines the type that encodes all of a program's side effect
   information, the type of statements, the type of declarations and
   the type of external declarations (for function definitions and
   global variables).  Also defines the special "extended expression"
   type.

states:
   Defines the type of program state, encoding not only the contents
   of memory, but maps for variable typing, variable addresses.

class_info:
   Defines various operators for deriving useful information from what
   is stored about classes in a state.  Wasserab et al's concepts are
   mechanised here.

operators:
   Defines the dynamic semantics of expression-operators such as
   addition.

overloading:
   A stub, but provides the entry-point for resolution of function
   calls in the presence of overloading.

side_effects:
   Defines how side effects are stored in side effect information
   records and applied to states.

declaration_dynamics:
   Defines dynamic semantics for declarations (which definition is
   parameterised by the relation giving meaning to expressions and
   statements), and notions such as default, value and zero
   initialisation.

dynamics:
   Provides the dynamic semantics for expressions, statements (the
   extended expressions, in fact) and external declarations.

sanity:
   Some larger-scale sanity theorems and their proofs.

concrete_tests:
   Sanity theorems to do with particular, "concrete" program
   fragments.

aggregates:
   Theory specifying how to calculate sizes and offsets for aggregate
   types (classes and structs).

instantiation:
   Defines the functions for instantiating template variables in
   abstract syntax.  This allows the definition of a partial ordering
   on types (and other forms), which is shown to be anti-symmetric up
   to the renaming of free variables. 

templates: 
   Defines the program_instantiation constant, which takes a list of
   external declarations (possibly including templates), and returns a
   list of "concrete" or "grounded" declarations, which will be what
   is actually run.  
